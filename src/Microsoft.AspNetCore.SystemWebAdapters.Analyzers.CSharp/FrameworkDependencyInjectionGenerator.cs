using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.AspNetCore.SystemWebAdapters.Analyzers;

/// <summary>
/// A source generator that generates dependency injection registration code for ASP.NET Framework including:
///
/// - ASP.NET MVC4
/// - ASP.NET Web API 2
///
/// We're using a source generator here to avoid taking hard dependencies on these frameworks or releasing separate
/// packages for each framework. The generated code will only be included in the compilation if the user is
/// referencing the relevant assemblies.
///
/// For each framework, we generate a new extension method `Add{Framework}DependencyInjection` that adds the relevant services
/// to the DI container.
///
/// We also generate a `AddSystemWebDependencyInjection` method that calls each of the individual framework methods for whatever
/// frameworks are referenced and will be automatically updated.
/// </summary>
[Generator]
public class FrameworkDependencyInjectionGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var usedFrameworks = context.CompilationProvider.Select((compilation, token) => new FrameworksUsed
        {
            HttpApplicationHost = compilation.GetTypeByMetadataName("Microsoft.AspNetCore.SystemWebAdapters.Hosting.IDependencyRegistrar") is { },
            WebApi = compilation.GetTypeByMetadataName("System.Web.Http.Dependencies.IDependencyResolver") is { },
            Mvc = compilation.GetTypeByMetadataName("System.Web.Mvc.IDependencyResolver") is { },
        });

        context.RegisterSourceOutput(usedFrameworks, (context, frameworks) =>
        {
            // No need to do anything if they're not referencing SystemWebAdapters with the ASP.NET Framework hosting infrastructure
            if (!frameworks.HttpApplicationHost)
            {
                return;
            }

            var source = CreateSource(frameworks.GetRegistrars());
            context.AddSource("DependencyInjectionServiceCollectionExtensions.g.cs", source);

            foreach (var registrarSource in frameworks.GetRegistrars())
            {
                using var stream = typeof(FrameworkDependencyInjectionGenerator).Assembly
                    .GetManifestResourceStream($"Microsoft.AspNetCore.SystemWebAdapters.Analyzers.CSharp.Resolvers.{registrarSource}.cs");

                if (stream is null)
                {
                    context.AddSource($"{registrarSource}.g.cs", $"// Could not find resource for {registrarSource}");
                }
                else
                {
                    context.AddSource($"{registrarSource}.g.cs", SourceText.From(stream, canBeEmbedded: true));
                }
            }
        });
    }


    private sealed record class FrameworksUsed
    {
        public bool HttpApplicationHost { get; init; }

        public bool Mvc { get; init; }

        public bool WebApi { get; init; }

        public IEnumerable<string> GetRegistrars()
        {
            if (Mvc)
            {
                yield return "Mvc";
            }

            if (WebApi)
            {
                yield return "WebApi";
            }
        }
    }
    private static string CreateSource(IEnumerable<string> registrars)
    {
        using var writer = new StringWriter();
        using var indentedWriter = new IndentedTextWriter(writer);

        indentedWriter.WriteLine("// <auto-generated />");
        indentedWriter.WriteLine();
        indentedWriter.WriteLine("using System;");
        indentedWriter.WriteLine("using System.Collections.Generic;");
        indentedWriter.WriteLine("using Microsoft.Extensions.DependencyInjection;");
        indentedWriter.WriteLine("using Microsoft.Extensions.DependencyInjection.Extensions;");
        indentedWriter.WriteLine("using Microsoft.AspNetCore.SystemWebAdapters.Hosting;");
        indentedWriter.WriteLine();
        indentedWriter.WriteLine("namespace System.Web");
        indentedWriter.WriteLine("{");
        indentedWriter.Indent++;

        indentedWriter.WriteLine("internal static partial class SystemWebFrameworksDependencyInjectionServiceCollectionExtensions");
        indentedWriter.WriteLine("{");
        indentedWriter.Indent++;

        indentedWriter.WriteLine("public static void AddSystemWebDependencyInjection(this HttpApplicationHostBuilder builder)");
        indentedWriter.WriteLine("{");
        indentedWriter.Indent++;
        indentedWriter.WriteLine("builder.AddWebObjectActivator();");
        foreach (var registrar in registrars)
        {
            indentedWriter.WriteLine($"builder.Add{registrar}DependencyInjection();");
        }
        indentedWriter.Indent--;
        indentedWriter.WriteLine("}");

        indentedWriter.Indent--;
        indentedWriter.WriteLine("}");
        indentedWriter.Indent--;
        indentedWriter.WriteLine("}");

        return writer.ToString();
    }
}
