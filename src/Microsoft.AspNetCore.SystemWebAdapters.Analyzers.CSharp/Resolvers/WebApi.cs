// <auto-generated />

using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Microsoft.AspNetCore.SystemWebAdapters.Hosting;
using System.Web.Http;
using System.Web.Http.Dependencies;

namespace System.Web
{
    internal static partial class SystemWebFrameworksDependencyInjectionServiceCollectionExtensions
    {
        /// <summary>
        /// Adds the WebApi dependency resolver so that WebApi components can resolve services from <see cref="HttpApplicationHost.Services"/>.
        /// </summary>
        public static void AddWebApiDependencyInjection(this HttpApplicationHostBuilder builder)
        {
            builder.Services.TryAddEnumerable(ServiceDescriptor.Singleton<IDependencyRegistrar, WebApiAdapterDependencyResolver>());
        }

        private sealed class WebApiAdapterDependencyResolver : IDependencyRegistrar, IDependencyResolver, IDisposable
        {
            private readonly IServiceProvider _services;

            public WebApiAdapterDependencyResolver(IServiceProvider services)
            {
                _services = services;
            }

            public string Name => "System.Web.Http.GlobalConfiguration.Configuration.DependencyResolver";

            public bool IsActive => ReferenceEquals(GlobalConfiguration.Configuration.DependencyResolver, this);

            public bool Enable(bool force)
            {
                if (force || !IsActive)
                {
                    GlobalConfiguration.Configuration.DependencyResolver = this;
                    return true;
                }

                return false;
            }

            public IDependencyScope BeginScope() => new Scope(_services.CreateScope());

            public object GetService(Type serviceType) => _services.GetService(serviceType);

            public IEnumerable<object> GetServices(Type serviceType) => _services.GetServices(serviceType);

            void IDisposable.Dispose()
            {
                // Cannot set the dependency resolver to null as it throws
            }

            private sealed class Scope : IDependencyScope
            {
                private readonly IServiceScope _scope;

                public Scope(IServiceScope scope)
                {
                    _scope = scope;
                }

                void IDisposable.Dispose() => _scope.Dispose();

                object IDependencyScope.GetService(Type serviceType) => _scope.ServiceProvider.GetService(serviceType);

                IEnumerable<object> IDependencyScope.GetServices(Type serviceType) => _scope.ServiceProvider.GetServices(serviceType);
            }
        }
    }
}
