// <auto-generated />

using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Microsoft.AspNetCore.SystemWebAdapters.Hosting;
using System.Web.Mvc;

namespace System.Web
{
    internal static partial class SystemWebFrameworksDependencyInjectionServiceCollectionExtensions
    {
        public static void AddMvcDependencyInjection(this HttpApplicationHostBuilder builder)
        {
            builder.Services.TryAddEnumerable(ServiceDescriptor.Singleton<IDependencyRegistrar, MvcAdapterDependencyResolver>());
            builder.Services.TryAddSingleton<IViewPageActivator, MvcAdapterDependencyResolver>();
        }

        private sealed class MvcAdapterDependencyResolver : IDependencyRegistrar, IDependencyResolver, IViewPageActivator, IDisposable
        {
            private readonly IServiceProvider _serviceProvider;

            public MvcAdapterDependencyResolver(IServiceProvider serviceProvider)
            {
                _serviceProvider = serviceProvider;
            }

            public string Name => "System.Web.Mvc.DependencyResolver";

            public bool IsActive => object.ReferenceEquals(DependencyResolver.Current, this);

            public bool Enable(bool force)
            {
                if (force || !IsActive)
                {
                    DependencyResolver.SetResolver(this);
                    return true;
                }

                return false;
            }

            object IDependencyResolver.GetService(Type serviceType)
            {
                return GetInternalService(_serviceProvider, serviceType);
            }

            IEnumerable<object> IDependencyResolver.GetServices(Type serviceType)
            {
                var genericEnumerable = typeof(IEnumerable<>).MakeGenericType(serviceType);
                return (IEnumerable<object>)GetInternalService(_serviceProvider, genericEnumerable);
            }

            object IViewPageActivator.Create(ControllerContext controllerContext, Type type)
            {
                var services = controllerContext.HttpContext.GetRequestServices();

                return GetInternalService(services, type);
            }

            private object GetInternalService(IServiceProvider provider, Type serviceType)
            {
                var existing = provider.GetService(serviceType);

                if (existing != null)
                {
                    return existing;
                }

                if (serviceType.IsInterface || serviceType.IsAbstract)
                {
                    return null;
                }

                return ActivatorUtilities.CreateInstance(provider, serviceType);
            }

            void IDisposable.Dispose()
            {
                if (IsActive)
                {
                    DependencyResolver.SetResolver(null);
                }
            }
        }
    }
}
