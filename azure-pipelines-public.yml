variables:
  - name: Build.Repository.Clean
    value: true
  - name: _TeamName
    value: AspNetCore
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
    value: true
  - name: _HelixType
    value: build/product
  - name: _DotNetArtifactsCategory
    value: .NETCore

  # Variables to automatically handle build pools
  - template: /eng/common/templates/variables/pool-providers.yml

  # Variables for public PR builds
  - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
    - name: _HelixSource
      value: pr/aspnet/AspLabs/$(Build.SourceBranch)

resources:
  containers:
  - container: LinuxContainer
    image: mcr.microsoft.com/dotnet-buildtools-prereqs:ubuntu-18.04-c103199-20180628134610
    options: --init # This ensures all the stray defunct processes are reaped.

trigger:
- main

pr:
- "*"

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: true
      helixRepo: dotnet/SystemWeb-Adapters
      # Align w/ Maestro++ default channel when generating software bills of materials (SBOMs).
      PackageVersion: 6.0.0
      jobs:
      - job: Windows
        pool:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals 1es-windows-2019-open
        variables:
        - name: _HelixBuildConfig
          value: $(_BuildConfig)
        strategy:
          matrix:
            Release:
              _BuildConfig: Release
              # PRs and external builds are not signed.
              ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
                _SignType: test
                _BuildArgs: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
        steps:
        - checkout: self
          clean: true
        - task: NuGetCommand@2
          displayName: 'Clear NuGet caches'
          condition: succeeded()
          inputs:
            command: custom
            arguments: 'locals all -clear'
        - script: eng\common\cibuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            $(_BuildArgs)
          name: Build
          displayName: Build
          condition: succeeded()
        - task: PowerShell@2
          inputs:
            filePath: update_apis.ps1
            argument: -c $(_BuildConfig)
          name: VerifyTypeForwardsRef
          displayName: Verify TypeForwards/Reference assembly
          condition: succeeded()
        - task: PublishTestResults@2
          displayName: Publish xUnit Test Results
          condition: always()
          continueOnError: true
          inputs:
            testRunner: xunit
            testResultsFiles: 'artifacts/TestResults/$(_BuildConfig)/*.xml'
        - task: PublishBuildArtifacts@1
          displayName: Publish Packages
          condition: and(eq(variables['system.pullrequest.isfork'], false), eq(variables['_BuildConfig'], 'Release'))
          continueOnError: true
          inputs:
            artifactName: Packages_$(Agent.Os)_$(Agent.JobName)
            parallel: true
            pathtoPublish: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
            publishLocation: Container
        - task: PublishBuildArtifacts@1
          displayName: Publish Logs
          condition: always()
          continueOnError: true
          inputs:
            artifactName: Logs_$(Agent.Os)_$(Agent.JobName)
            parallel: true
            pathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
            publishLocation: Container

      - job: macOS
        pool:
          vmImage: macOS-latest
        strategy:
          matrix:
            release:
              _BuildConfig: Release
        variables:
        - name: _HelixBuildConfig
          value: $(_BuildConfig)
        steps:
        - checkout: self
          clean: true
        - script: eng/common/cibuild.sh
            --configuration $(_BuildConfig)
            --prepareMachine
          name: Build
          displayName: Build
          condition: succeeded()
        - task: PowerShell@2
          inputs:
            filePath: update_apis.ps1
            argument: -c $(_BuildConfig)
          name: VerifyTypeForwardsRef
          displayName: Verify TypeForwards/Reference assembly
          condition: succeeded()
        - task: PublishTestResults@2
          displayName: Publish xUnit Test Results
          condition: always()
          continueOnError: true
          inputs:
            testRunner: xunit
            testResultsFiles: 'artifacts/TestResults/$(_BuildConfig)/*.xml'
        - task: PublishBuildArtifacts@1
          displayName: Publish Logs
          condition: always()
          continueOnError: true
          inputs:
            artifactName: Logs_$(Agent.Os)_$(Agent.JobName)
            parallel: true
            pathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
            publishLocation: Container

      - job: Linux
        pool:
          vmImage: ubuntu-latest
          container: LinuxContainer
        strategy:
          matrix:
            release:
              _BuildConfig: Release
        variables:
        - name: _HelixBuildConfig
          value: $(_BuildConfig)
        steps:
        - checkout: self
          clean: true
        - script: eng/common/cibuild.sh
            --configuration $(_BuildConfig)
            --prepareMachine
          name: Build
          displayName: Build
          condition: succeeded()
        - task: PowerShell@2
          inputs:
            filePath: update_apis.ps1
            argument: -c $(_BuildConfig)
          name: VerifyTypeForwardsRef
          displayName: Verify TypeForwards/Reference assembly
          condition: succeeded()
        - task: PublishTestResults@2
          displayName: Publish xUnit Test Results
          condition: always()
          continueOnError: true
          inputs:
            testRunner: xunit
            testResultsFiles: 'artifacts/TestResults/$(_BuildConfig)/*.xml'
        - task: PublishBuildArtifacts@1
          displayName: Publish Logs
          condition: always()
          continueOnError: true
          inputs:
            artifactName: Logs_$(Agent.Os)_$(Agent.JobName)
            parallel: true
            pathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
            publishLocation: Container
